-- Generated by Oracle SQL Developer Data Modeler 18.3.0.268.1156
--   at:        2020-02-18 20:57:44 CET
--   site:      SQL Server 2012
--   type:      SQL Server 2012
IF OBJECT_ID('DodajAutora') IS NOT NULL
DROP View DodajAutora

IF OBJECT_ID('DodajDostawce') IS NOT NULL
DROP View DodajDostawce

IF OBJECT_ID('DodajKlienta') IS NOT NULL
DROP View DodajKlienta

IF OBJECT_ID('DodajKsiazki') IS NOT NULL
DROP View DodajKsiazki

IF OBJECT_ID('Ranking') IS NOT NULL
DROP View Ranking

IF OBJECT_ID('KsiazkiZamowienia') IS NOT NULL
DROP TABLE KsiazkiZamowienia

IF OBJECT_ID('Zamowienia') IS NOT NULL
DROP TABLE Zamowienia

IF OBJECT_ID('autor') IS NOT NULL
DROP TABLE autor

IF OBJECT_ID('Dostawca') IS NOT NULL
DROP TABLE Dostawca

IF OBJECT_ID('Klient') IS NOT NULL
DROP TABLE Klient

IF OBJECT_ID('Firma') IS NOT NULL
DROP TABLE Firma

IF OBJECT_ID('Epoka') IS NOT NULL
DROP TABLE Epoka

IF OBJECT_ID('Ksiazki') IS NOT NULL
DROP TABLE Ksiazki

IF OBJECT_ID('Osoba') IS NOT NULL
DROP TABLE Osoba

IF OBJECT_ID('Kategoria') IS NOT NULL
DROP TABLE Kategoria

IF OBJECT_ID('Wydawnictwo') IS NOT NULL
DROP TABLE Wydawnictwo


CREATE TABLE epoka (
    id_epoka                bigint NOT NULL Primary Key,
    nazwa_epoki             VARCHAR(128) NOT NULL,
    rok_rozpoczecia_epoki   DATE NOT NULL,
    rok_zakonczenia_epoki   DATE NOT NULL
)

CREATE TABLE firma (
    id_firmy              bigint NOT NULL Primary Key,
    nazwa_firmy           VARCHAR(128) NOT NULL,
    miejsce_siedziby      VARCHAR(128) NOT NULL,
    rok_zalozenia_firmy   DATE NOT NULL,
    nip                   VARCHAR(10) NOT NULL
)

CREATE TABLE wydawnictwo (
    id_wydawnictwa      bigint NOT NULL Primary Key,
    nazwa_wydawnictwa   VARCHAR(128) NOT NULL
)

CREATE TABLE osoba (
    id_osoba         bigint NOT NULL Primary Key,
    imie             VARCHAR(128) NOT NULL,
    nazwisko         VARCHAR(128) NOT NULL,
    plec             VARCHAR(2) NOT NULL,
    data_urodzenia   DATE NOT NULL,
    pesel            VARCHAR(11)
)

CREATE TABLE autor (
    id_osoba   bigint NOT NULL Foreign Key References Osoba(ID_Osoba) Unique,
    id_epoka   bigint Foreign Key REFERENCES Epoka(ID_Epoka)
)

CREATE TABLE dostawca (
    id_osoba   bigint NOT NULL foreign Key References Osoba(ID_Osoba) Unique,
    id_firmy   bigint Foreign Key References Firma(ID_Firmy)
)

CREATE TABLE klient (
    id_osoba       bigint NOT NULL Foreign Key References Osoba(ID_Osoba) Unique,
    ulica          VARCHAR(128) NOT NULL,
    miejscowosc    VARCHAR(128) NOT NULL,
    kod_pocztowy   bigint NOT NULL
)

CREATE TABLE kategoria (
    id_kategoria      bigint NOT NULL Primary Key,
    nazwa_kategorii   VARCHAR(128) NOT NULL
)

CREATE TABLE zamowienia (
    id_zamowienia      bigint NOT NULL Primary Key,
    id_osoba           bigint NOT NULL Foreign Key References Osoba(ID_Osoba),
    data_zaplaty       DATE NOT NULL,
    rodzaj_platnosci   VARCHAR(128) NOT NULL
)

CREATE TABLE ksiazki (
    isbn                bigint NOT NULL Primary Key,
    tytul               VARCHAR(128) NOT NULL,
    id_wydawnictwa      bigint NOT NULL Foreign Key References Wydawnictwo(ID_Wydawnictwa),
    rok_wydania         SMALLINT NOT NULL,
    miejsce_wydania     VARCHAR(128) NOT NULL,
    id_kategoria        bigint NOT NULL Foreign Key References Kategoria(ID_Kategoria),
    cena                money NOT NULL,
    ilosc_w_magazynie   bigint NOT NULL
)

CREATE TABLE ksiazkizamowienia (
    id_zamowienia   bigint NOT NULL Foreign Key References Zamowienia(ID_Zamowienia),
    isbn            bigint NOT NULL Foreign Key References Ksiazki(ISBN),
    ilosc_ksiazek   bigint NOT NULL
)

ALTER TABLE ksiazkizamowienia add constraint niezerowailosc check(ilosc_ksiazek > 0) 
Go

CREATE VIEW DodajAutora  AS 
SELECT Imie, Nazwisko, Plec, Data_Urodzenia, PESEL, Nazwa_Epoki, Rok_Rozpoczecia_Epoki, Rok_Zakonczenia_Epoki FROM Autor 
left JOIN Osoba
on Autor.ID_Osoba=Osoba.ID_Osoba
LEFT JOIN Epoka
on Autor.ID_Epoka=Epoka.ID_Epoka 
GO

CREATE VIEW DodajDostawce  AS 
SELECT Imie, Nazwisko, Plec, Data_Urodzenia, PESEL, Nazwa_Firmy, Miejsce_Siedziby, Rok_Zalozenia_Firmy FROM Dostawca
Left join Firma
on Dostawca.ID_Firmy=Firma.ID_Firmy
Left Join Osoba
on Dostawca.ID_Osoba=Osoba.ID_Osoba 
GO

CREATE VIEW DodajKlienta  AS 
SELECT Imie, Nazwisko, Plec, Data_Urodzenia, PESEL, Ulica, Miejscowosc, Kod_Pocztowy FROM Klient
Left Join Osoba
on Klient.Id_Osoba=Osoba.ID_Osoba 
GO

CREATE VIEW DodajKsiazki  AS 
SELECT ISBN, Tytul, Nazwa_Kategorii, Rok_Wydania, Miejsce_Wydania, Nazwa_Wydawnictwa, Cena, Ilosc_w_Magazynie FROM Ksiazki
Left Join Wydawnictwo
On Ksiazki.ID_Wydawnictwa=Wydawnictwo.ID_Wydawnictwa
Left Join Kategoria
On Ksiazki.ID_Kategoria=Kategoria.ID_Kategoria 
GO

CREATE VIEW Ranking  AS 
SELECT KsiazkiZamowienia.ISBN, SUM(KsiazkiZamowienia.Ilosc_Ksiazek) AS SumaZamowien FROM KsiazkiZamowienia
Left Join Ksiazki
ON KsiazkiZamowienia.ISBN=Ksiazki.ISBN
Group By KsiazkiZamowienia.ISBN 
--Order By SumaZamowien 
GO
IF OBJECT_ID('autor_epoka_fk') IS NOT NULL
ALTER TABLE AUTOR
DROP CONSTRAINT autor_epoka_fk

ALTER TABLE Autor
    ADD CONSTRAINT autor_epoka_fk FOREIGN KEY ( id_epoka )
        REFERENCES epoka ( id_epoka )
ON DELETE NO ACTION 
    ON UPDATE no action

IF OBJECT_ID('autor_osoba_fk') IS NOT NULL
ALTER TABLE AUTOR
DROP CONSTRAINT autor_osoba_fk

ALTER TABLE Autor
    ADD CONSTRAINT autor_osoba_fk FOREIGN KEY ( id_osoba )
        REFERENCES osoba ( id_osoba )
ON DELETE NO ACTION 
    ON UPDATE no action

	IF OBJECT_ID('dostawca_firma_fk') IS NOT NULL
ALTER TABLE Dostawca
DROP CONSTRAINT dostawca_firma_fk

ALTER TABLE Dostawca
    ADD CONSTRAINT dostawca_firma_fk FOREIGN KEY ( id_firmy )
        REFERENCES firma ( id_firmy )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE Dostawca
    ADD CONSTRAINT dostawca_osoba_fk FOREIGN KEY ( id_osoba )
        REFERENCES osoba ( id_osoba )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE Klient
    ADD CONSTRAINT klient_osoba_fk FOREIGN KEY ( id_osoba )
        REFERENCES osoba ( id_osoba )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE Ksiazki
    ADD CONSTRAINT ksiazki_kategoria_fk FOREIGN KEY ( id_kategoria )
        REFERENCES kategoria ( id_kategoria )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE Ksiazki
    ADD CONSTRAINT ksiazki_wydawnictwo_fk FOREIGN KEY ( id_wydawnictwa )
        REFERENCES wydawnictwo ( id_wydawnictwa )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE Zamowienia
    ADD CONSTRAINT zamowienia_osoba_fk FOREIGN KEY ( id_osoba )
        REFERENCES osoba ( id_osoba )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE KsiazkiZamowienia
    ADD CONSTRAINT zamówienie_ksiazki_fk FOREIGN KEY ( isbn )
        REFERENCES ksiazki ( isbn )
ON DELETE NO ACTION 
    ON UPDATE no action

ALTER TABLE KsiazkiZamowienia
    ADD CONSTRAINT zamówienie_osoba_fkv1 FOREIGN KEY ( id_zamowienia )
        REFERENCES zamowienia ( id_zamowienia )
ON DELETE NO ACTION 
    ON UPDATE no action;
	

if Object_ID('s_pesel') IS NOT NULL
Drop Trigger S_pesel

go 

CREATE TRIGGER s_pesel ON osoba
FOR INSERT, UPDATE
AS
DECLARE @pesel VARCHAR(11)
SELECT @pesel=Pesel FROM Inserted
IF
( (((CAST(SUBSTRING(@pesel,1,1) AS tinyint)*9)
+(CAST(SUBSTRING(@pesel,2,1) AS BIGINT)*7)
+(CAST(SUBSTRING(@pesel,3,1) AS BIGINT)*3)
+(CAST(SUBSTRING(@pesel,4,1) AS BIGINT)*1)
+(CAST(SUBSTRING(@pesel,5,1) AS BIGINT)*9)
+(CAST(SUBSTRING(@pesel,6,1) AS BIGINT)*7)
+(CAST(SUBSTRING(@pesel,7,1) AS BIGINT)*3)
+(CAST(SUBSTRING(@pesel,8,1) AS BIGINT)*1)
+(CAST(SUBSTRING(@pesel,9,1) AS BIGINT)*9)
+(CAST(SUBSTRING(@pesel,10,1) AS BIGINT)*7))%10)=(CAST(SUBSTRING(@pesel,11,1) AS BIGINT)*1))
BEGIN
PRINT 'Wprowadzony pesel jest poprawny!'
END
ELSE
BEGIN
PRINT 'Wprowadzono niepoprawny pesel!'
ROLLBACK
END

if Object_ID('s_nip') IS NOT NULL
Drop Trigger S_nip

go 


CREATE TRIGGER s_nip ON Firma
FOR INSERT, UPDATE
AS
DECLARE @nip VARCHAR(11)
SELECT @nip=nip FROM Inserted
IF
( (((CAST(SUBSTRING(@nip,1,1) AS tinyint)*6)
+(CAST(SUBSTRING(@nip,2,1) AS BIGINT)*5)
+(CAST(SUBSTRING(@nip,3,1) AS BIGINT)*7)
+(CAST(SUBSTRING(@nip,4,1) AS BIGINT)*2)
+(CAST(SUBSTRING(@nip,5,1) AS BIGINT)*3)
+(CAST(SUBSTRING(@nip,6,1) AS BIGINT)*4)
+(CAST(SUBSTRING(@nip,7,1) AS BIGINT)*5)
+(CAST(SUBSTRING(@nip,8,1) AS BIGINT)*6)
+(CAST(SUBSTRING(@nip,9,1) AS BIGINT)*7))%11
=(CAST(SUBSTRING(@nip,10,1) AS BIGINT))))
BEGIN
PRINT 'Wprowadzony nip jest poprawny!'
END
ELSE
BEGIN
PRINT 'Wprowadzono niepoprawny nip!'
ROLLBACK
END


Insert Into Firma Values
(1, 'Pawel', 'Rys', '1994-01-12', '6750002236') 

Go

 


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            11
-- CREATE INDEX                             0
-- ALTER TABLE                             32
-- CREATE VIEW                              5
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE DATABASE                          0
-- CREATE DEFAULT                           0
-- CREATE INDEX ON VIEW                     0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE ROLE                              0
-- CREATE RULE                              0
-- CREATE SCHEMA                            0
-- CREATE SEQUENCE                          0
-- CREATE PARTITION FUNCTION                0
-- CREATE PARTITION SCHEME                  0
-- 
-- DROP DATABASE                            0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
